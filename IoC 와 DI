제어의 역전 IoC (Inversion of Control)


프로그램의 제어 흐름을 직접 제어하는 것이 아니라 외부에서 관리하는 것을 제어의 역전(IoC)라고 한다.


우리가 프레임워크 없이 개발할 때에는 객체의 생성, 설정, 초기화, 메소드 호출, 소멸을 프로그래머가 직접 관리할 것이다.

하지만, 프레임워크를 사용하면 객체의 생명 주기를 모두 프레임 워크에 위임할 수 있다. 즉, 외부 라이브러리가 프로그램가 작성한
코드를 호출하고, 흐름을 제어한다. 

이처럼 개발자가 작성한 객체나 메서드의 제어를 개발자가 아니라, 외부에 위임하는 설계 원칙을 제어의 역전이라고 한다.
즉, 프레임 워크는 제어의 역전 개념이 적용된 대표적인 기술이라고 여길 수 있다. 

제어의 역전에서는 오브젝트 스스로가 사용할 오브젝트를 결정하지도, 생성하지도 않는다. 원칙의 이름 그대로 제어에 대한 권한이
개발자에서 외부 환경으로 역전되는 것이다.

전통되는 방식으로 라이브러리를 사용하는 것은 우리의 프로젝트의 일부분으로서 라이브러리를 가져와 우리가 제어하는 것이다.
반면 IoC는 우리의 코드가 프레임워크의 일부분이 되어 프레임워크에 의해 제어되는 것 이라고 생각하면 된다.




의존관계 주입 DI(Dependency Injection)

토비의 스프링에서는 다음의 세 가지 조건을 충족하는 작업을 의존관계 주입이라 말한다.

1. 클래스 모델이나 코드에는 런타임 시점의 의존관계가 드러나지 않는다. 그러기 위해서는 인터페이스만 의존하고 있어야 한다.

2. 런타임 시점의 의존관계는 컨테이너나 팩토리 같은 제 3의 존재가 졀정한다

3. 의존관계는 사용할 오브젝트에 대한 래퍼런스르 외부에서 재공(주입) 해줌으로써 만들어진다.

애플리케이션 실행 시점(런타임)에 외부에서 실제 구현 객체를 생성하고 클라이언트에 전달해서 클라이언트와 서버의 
실제 의존관계가 연결 되는 것을 의존관계 주입이라 한다.

객체 인스턴스를 생성하고, 그 참조값을 전달해서 연결된다.

의존관계 주입을 사용하면 클라이언트 코드를 변경하지 않고, 클라이언트가 호출하는 대상의 타입의 인스턴스를 변경할 수 있다.

의존관계 주입을 사용하면 정적인 클래서 의존관계를 변경하지 않고, 동적인 객체 인스턴스 의존관계를 쉽게 변경 할 수 있다. 




IoC 컨테이너, DI 컨테이너
객체를 생성하고 관리하면서 의존관계를 연결해 주는 것을 IoC 컨테이너 또는 DI 컨테이너라고 한다.
